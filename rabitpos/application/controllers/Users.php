<?php
 class Users extends MY_Controller { public function __construct() { parent::__construct(); $this->load_global(); $this->load->model("\163\x74\x61\164\x65\x5f\155\x6f\x64\145\x6c", "\x73\164\141\164\145"); } public function index() { $this->permission_check("\165\x73\x65\162\163\x5f\x61\x64\x64"); $data = $this->data; $data["\160\x61\147\x65\x5f\164\x69\x74\x6c\x65"] = $this->lang->line("\143\162\145\141\164\x65\137\x75\163\145\x72\163"); $this->load->view("\x75\x73\x65\162\x73", $data); } public function save_or_update() { $data = $this->data; $this->form_validation->set_rules("\x6d\157\x62\x69\154\145", "\115\157\142\x69\154\145", "\x72\145\161\165\151\x72\x65\144\x7c\164\162\151\155"); $this->form_validation->set_rules("\x65\x6d\x61\151\x6c", "\105\155\141\x69\154", "\162\145\x71\165\x69\162\x65\144\174\x76\x61\154\x69\144\x5f\x65\x6d\141\x69\x6c"); if ($this->input->post("\143\x6f\155\155\x61\x6e\x64") == "\x73\141\166\x65") { $this->form_validation->set_rules("\x70\141\163\163", "\120\x61\x73\163\167\157\x72\144", "\162\145\x71\x75\151\x72\x65\144\x7c\x74\x72\x69\155\174\155\151\156\x5f\154\145\x6e\147\x74\x68\x5b\65\x5d\x7c\x6d\x61\170\137\x6c\145\x6e\147\164\150\133\x31\x32\135"); $this->form_validation->set_rules("\x6e\x65\x77\137\x75\163\145\x72", "\125\163\145\x72\156\x61\x6d\145", "\162\145\x71\x75\151\x72\145\144\x7c\164\162\x69\x6d\x7c\x6d\x69\156\x5f\x6c\x65\x6e\x67\164\150\133\x35\x5d\174\x6d\x61\x78\137\154\145\x6e\147\x74\150\133\61\x32\x5d"); $this->form_validation->set_rules("\x72\157\154\145\137\x69\144", "\122\157\154\x65", "\x72\145\x71\165\151\x72\x65\x64\x7c\164\x72\151\155"); } if ($this->form_validation->run() == TRUE) { $this->load->model("\165\x73\x65\x72\163\x5f\155\157\144\145\154"); if ($this->input->post("\x63\157\x6d\155\x61\x6e\x64") != "\x75\x70\144\141\x74\145") { $result = $this->users_model->verify_and_save(); } else { $q_id = $this->input->post("\x71\137\x69\144"); $data["\x71\x5f\151\x64"] = $q_id; $result = $this->users_model->verify_and_update($data); } echo $result; } else { echo validation_errors(); } } public function view() { $this->permission_check("\x75\x73\x65\162\x73\x5f\x76\151\145\x77"); $data = $this->data; $data["\x70\x61\147\145\137\164\x69\164\154\x65"] = $this->lang->line("\165\163\x65\x72\163\137\154\151\163\164"); $this->load->view("\165\163\x65\x72\x73\x2d\x76\x69\x65\x77", $data); } public function status_update() { $this->permission_check_with_msg("\165\163\145\x72\x73\x5f\145\x64\x69\164"); $userid = $this->input->post("\151\x64"); $status = $this->input->post("\163\x74\x61\x74\165\163"); $this->load->model("\165\x73\145\162\163\x5f\155\x6f\144\x65\x6c"); $result = $this->users_model->status_update($userid, $status); return $result; } public function password_reset() { $data = $this->data; $data["\x70\141\147\x65\137\164\151\x74\154\145"] = $this->lang->line("\143\x68\x61\x6e\x67\145\137\x70\x61\x73\x73\167\x6f\x72\x64"); $this->load->view("\143\150\x61\x6e\147\145\x2d\160\x61\163\163", $data); } public function password_update() { if ($this->session->userdata("\x69\x6e\166\x5f\x75\x73\x65\162\x6e\141\x6d\x65") == "\x61\x64\155\151\156" && demo_app()) { echo "\x52\145\163\164\x72\151\143\164\145\144\40\x41\144\x6d\151\156\x20\x50\141\163\x73\x77\x6f\162\x64\x20\103\150\141\x6e\147\145"; die; } $data = $this->data; $currentpass = $this->input->post("\143\165\162\162\145\x6e\x74\160\141\x73\163"); $newpass = $this->input->post("\156\x65\167\x70\x61\163\163"); $this->load->model("\165\163\x65\162\x73\x5f\155\157\x64\x65\154"); $result = $this->users_model->password_update(md5($currentpass), md5($newpass), $data); echo $result; } public function dbbackup() { $this->permission_check_with_msg("\x73\151\x74\x65\137\x65\x64\151\164"); if (demo_app()) { echo "\x52\x65\163\x74\162\151\x63\x74\x65\144\x20\x69\156\40\x44\x65\x6d\x6f"; die; } if (!isBakup()) { echo "\x43\150\341\xbb\xa9\x63\40\156\304\x83\156\147\40\143\150\341\xbb\x89\x20\150\341\xbb\x97\40\x74\162\341\xbb\xa3\x20\142\xe1\272\xa3\x6e\40\164\x68\306\260\306\xa1\x6e\x67\40\155\xe1\272\241\x69"; die; } $subdomain_ = getPathFolder(); $file_name = $config["\144\x61\x74\141\x62\x61\x73\145"]; $this->load->dbutil(); $prefs = array("\x6e\145\167\154\151\x6e\145" => "\xa", "\146\x6f\x72\x6d\141\x74" => "\172\151\x70", "\x66\151\x6c\x65\156\141\x6d\x65" => $file_name, "\146\157\x72\145\151\147\156\137\x6b\145\x79\137\143\150\x65\143\153\163" => FALSE); $backup = $this->dbutil->backup($prefs); $this->load->helper("\146\151\x6c\145"); $path_file_ = $subdomain_; write_file("\144\x62\x62\141\x63\x6b\165\160\x2f" . $path_file_ . "\x5f\x64\142" . date("\137\144\55\155\55\131\x2d\x68\x2d\155\x2d\x73") . "\56\x67\172", $backup); $this->load->helper("\x64\157\167\x6e\x6c\157\x61\144"); force_download($path_file_ . "\x5f\144\142" . date("\x5f\144\55\155\55\x59\x2d\x68\55\155\55\163") . "\56\147\x7a", $backup); } public function imagesbackup() { $this->permission_check_with_msg("\x73\x69\x74\x65\x5f\x65\144\151\x74"); if (demo_app()) { echo "\x52\x65\x73\x74\162\x69\143\x74\x65\x64\x20\x69\x6e\x20\104\145\155\x6f"; die; } if (!isBakup()) { echo "\x43\150\xe1\xbb\xa9\x63\40\156\xc4\x83\x6e\147\x20\x63\x68\xe1\273\x89\40\x68\341\xbb\227\x20\x74\x72\xe1\273\xa3\40\x62\341\272\243\156\40\x74\150\306\260\306\241\x6e\147\x20\x6d\341\272\xa1\x69"; die; } $subdomain_ = getPathFolder(); $sourceFolder = "\x75\x70\154\157\141\x64\163\x2f" . $subdomain_; if (!is_dir($sourceFolder)) { if (mkdir($sourceFolder, 493, true)) { } } $zipFileName = "\165\x70\154\157\141\144\x73\x2f" . $subdomain_ . "\x5f\144\141\164\x61" . date("\x5f\x64\55\x6d\55\x59\x2d\x68\x2d\155\x2d\163") . "\56\x7a\x69\160"; $zip = new ZipArchive(); if ($zip->open($zipFileName, ZipArchive::CREATE) === TRUE) { function addFolderToZip($folder, $zip, $exclusiveLength) { $folderHandle = opendir($folder); while (false !== ($file = readdir($folderHandle))) { if ($file != "\56" && $file != "\56\x2e") { $filePath = $folder . "\57" . $file; $localPath = substr($filePath, $exclusiveLength); if (is_file($filePath)) { $zip->addFile($filePath, $localPath); } elseif (is_dir($filePath)) { $zip->addEmptyDir($localPath); addFolderToZip($filePath, $zip, $exclusiveLength); } } } closedir($folderHandle); } addFolderToZip($sourceFolder, $zip, strlen($sourceFolder) + 1); $zip->close(); } if (file_exists($zipFileName)) { header("\x43\157\x6e\x74\145\x6e\x74\55\104\145\x73\143\x72\151\160\x74\x69\157\x6e\x3a\40\x46\x69\x6c\145\40\x54\162\141\156\163\x66\x65\x72"); header("\x43\x6f\156\x74\145\x6e\164\55\124\x79\x70\x65\72\x20\x61\x70\x70\154\151\x63\x61\164\151\x6f\156\x2f\x7a\151\x70"); header("\103\157\x6e\164\145\x6e\164\x2d\x44\151\x73\160\x6f\163\x69\164\x69\x6f\156\72\x20\x61\164\164\141\143\150\x6d\145\x6e\164\73\x20\146\x69\154\x65\x6e\x61\x6d\x65\75\42" . basename($zipFileName) . "\42"); header("\103\x6f\x6e\164\x65\x6e\164\x2d\x4c\145\x6e\147\x74\150\72\x20" . filesize($zipFileName)); readfile($zipFileName); unlink($zipFileName); } else { echo "\103\xc3\xb3\x20\x6c\341\273\227\151\40\164\162\157\156\x67\x20\161\x75\xc3\241\x20\164\x72\xc3\254\x6e\150\40\156\xc3\xa9\156\40\x74\x68\306\xb0\x20\155\341\xbb\xa5\143\x2e"; } } public function edit($id) { $this->permission_check("\x75\x73\145\162\x73\137\x65\x64\151\164"); $this->load->model("\165\163\x65\x72\x73\137\155\x6f\144\x65\x6c"); $data = $this->users_model->get_details($id); $data["\160\141\x67\145\x5f\x74\151\x74\154\x65"] = $this->lang->line("\x65\x64\151\x74\x5f\x75\163\x65\x72"); $this->load->view("\x75\163\x65\162\x73", $data); } public function delete_user() { $this->permission_check_with_msg("\x75\x73\145\x72\163\x5f\x64\x65\154\x65\164\x65"); $this->load->model("\165\163\145\162\163\137\155\157\x64\145\x6c"); $id = $this->input->post("\161\x5f\151\144"); $result = $this->users_model->delete_user($id); return $result; } }